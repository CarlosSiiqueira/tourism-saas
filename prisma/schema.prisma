// docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Endereco {
  id            String          @id @default(uuid())
  logradouro    String
  numero        String
  complemento   String?
  cep           String
  cidade        String
  uf            String
  bairro        String
  Pessoas       Pessoas[]
  LocalEmbarque LocalEmbarque[]
  Fornecedor    Fornecedor[]
}

model Pessoas {
  id              String    @id @default(uuid())
  nome            String
  cpf             String
  sexo            String
  dataCadastro    DateTime  @default(now())
  observacoes     String?
  telefone        String?
  telefoneWpp     String?
  email           String
  contato         String?
  telefoneContato String?
  ativo           Boolean   @default(true)
  dataNascimento  DateTime?
  rg              String?
  emissor         String?

  Usuarios            Usuarios              @relation(fields: [usuarioCadastro], references: [id])
  usuarioCadastro     String
  Ranking             RankingClientes?      @relation(fields: [rankingClientesId], references: [id])
  rankingClientesId   String?
  UsuarioVinculado    Usuarios?             @relation(fields: [userId], references: [id], name: "UsuarioVinculado")
  userId              String?
  Endereco            Endereco[]
  Vendas              Vendas[]
  Transacoes          Transacoes[]
  ExcursaoPassageiros ExcursaoPassageiros[]
  Reservas            Reservas[]
  CreditoClientes     CreditoClientes[]
}

model Usuarios {
  id              String   @id @default(uuid())
  nome            String
  username        String   @unique
  password        String
  salt            String?
  dataCadastro    DateTime @default(now())
  usuarioCadastro String?
  tipo            Int
  email           String
  ativo           Boolean  @default(true)
  comissao        Float?
  meta            Float?

  Pessoas               Pessoas[]
  Pacotes               Pacotes[]
  FormaPagamento        FormaPagamento[]
  ContaBancaria         ContaBancaria[]
  Produtos              Produtos[]
  ExcursaoQuartos       ExcursaoQuartos[]
  ExcursaoOnibus        ExcursaoOnibus[]
  LocalEmbarque         LocalEmbarque[]
  PassageiroEmbarque    PassageiroEmbarque[]
  Excursao              Excursao[]
  Vendas                Vendas[]
  Transacoes            Transacoes[]
  Fornecedor            Fornecedor[]
  CategoriaTransacao    CategoriaTransacao[]
  TipoQuarto            TipoQuarto[]
  Reservas              Reservas[]
  SubCategoriaTransacao SubCategoriaTransacao[]
  RankingClientes       RankingClientes[]
  CreditoClientes       CreditoClientes[]
  Opcionais             Opcionais[]
  Logs                  Logs[]
  Configuracoes         Configuracoes[]
  Comissao              Comissao[]
  Imagens               Imagens[]
  PessoaVinculada       Pessoas[]               @relation("UsuarioVinculado")
}

model Pacotes {
  id             String   @id @default(uuid())
  nome           String
  descricao      String
  ativo          Boolean  @default(true)
  dataCadastro   DateTime @default(now())
  origem         Int      @default(1)
  tipoTransporte Int      @default(1)
  idWP           Int?
  categoria      Int?

  Imagem          Imagens?     @relation(fields: [urlImagem], references: [id], name: "imagem")
  urlImagem       String?
  ImagemBloqueado Imagens?     @relation(fields: [urlImgEsgotado], references: [id], name: "imagemBloqueado")
  urlImgEsgotado  String?
  Usuarios        Usuarios     @relation(fields: [usuarioCadastro], references: [id])
  usuarioCadastro String
  Inclusos        Produtos[]   @relation("inclusos")
  Galeria         Imagens[]
  Excursao        Excursao[]
  Transacoes      Transacoes[]
  Produto         Produtos[]
}

model FormaPagamento {
  id                 String   @id @default(uuid())
  nome               String
  dataCadastro       DateTime @default(now())
  taxa               Float
  taxa2x             Float?
  taxa3x             Float?
  taxa4x             Float?
  taxa5x             Float?
  taxa6x             Float?
  taxa7x             Float?
  taxa8x             Float?
  taxa9x             Float?
  taxa10x            Float?
  taxa11x            Float?
  taxa12x            Float?
  qtdDiasRecebimento Int
  ativo              Boolean  @default(true)

  Usuarios        Usuarios     @relation(fields: [usuarioCadastro], references: [id])
  usuarioCadastro String
  Vendas          Vendas[]
  Transacoes      Transacoes[]
}

model ContaBancaria {
  id           String   @id @default(uuid())
  nome         String
  ativo        Boolean  @default(true)
  saldo        Float    @default(0)
  dataCadastro DateTime @default(now())

  Usuarios        Usuarios     @relation(fields: [usuarioCadastro], references: [id])
  usuarioCadastro String
  Transacoes      Transacoes[]
}

model Produtos {
  id           String    @id @default(uuid())
  nome         String
  estoque      Int
  dataCompra   DateTime?
  dataCadastro DateTime
  ativo        Boolean   @default(true)
  valor        Float

  Fornecedor       Fornecedor   @relation(fields: [codigoFornecedor], references: [id])
  codigoFornecedor String
  Usuarios         Usuarios     @relation(fields: [usuarioCadastro], references: [id])
  usuarioCadastro  String
  Vendas           Vendas[]
  Transacoes       Transacoes[]
  Opcionais        Opcionais[]
  Pacotes          Pacotes[]
  Inclusos         Pacotes[]    @relation("inclusos")
}

model ExcursaoQuartos {
  id           String   @id @default(uuid())
  numeroQuarto String
  dataCadastro DateTime @default(now())

  TipoQuarto      TipoQuarto            @relation(fields: [idTipoQuarto], references: [id])
  idTipoQuarto    String
  Excursao        Excursao              @relation(fields: [codigoExcursao], references: [id])
  codigoExcursao  String
  Passageiros     ExcursaoPassageiros[]
  Usuarios        Usuarios              @relation(fields: [usuarioCadastro], references: [id])
  usuarioCadastro String
}

model ExcursaoOnibus {
  id            String   @id @default(uuid())
  numeroCadeira String
  dataCadastro  DateTime @default(now())

  Passageiro       ExcursaoPassageiros @relation(fields: [codigoPassageiro], references: [id])
  codigoPassageiro String
  Excursao         Excursao            @relation(fields: [codigoExcursao], references: [id])
  codigoExcursao   String
  Usuarios         Usuarios            @relation(fields: [usuarioCadastro], references: [id])
  usuarioCadastro  String
}

model LocalEmbarque {
  id           String   @id @default(uuid())
  nome         String
  observacoes  String?
  horaEmbarque String
  dataCadastro DateTime @default(now())
  ativo        Boolean  @default(true)

  Endereco            Endereco              @relation(fields: [codigoEndereco], references: [id])
  codigoEndereco      String
  Usuarios            Usuarios              @relation(fields: [usuarioCadastro], references: [id])
  usuarioCadastro     String
  PassageiroEmbarque  PassageiroEmbarque[]
  ExcursaoPassageiros ExcursaoPassageiros[]
  Reservas            Reservas[]
  Excursao            Excursao[]
}

model PassageiroEmbarque {
  id           String   @id @default(uuid())
  embarcou     Boolean  @default(false)
  horaEmbarque String
  dataCadastro DateTime @default(now())

  LocalEmbarque       LocalEmbarque       @relation(fields: [codigoLocalEmbarque], references: [id])
  codigoLocalEmbarque String
  Excursao            Excursao            @relation(fields: [codigoExcursao], references: [id])
  codigoExcursao      String
  Passageiro          ExcursaoPassageiros @relation(fields: [codigoPassageiro], references: [id])
  codigoPassageiro    String
  Usuarios            Usuarios            @relation(fields: [usuarioCadastro], references: [id])
  usuarioCadastro     String
}

model Excursao {
  id              String   @id @default(uuid())
  nome            String
  dataInicio      DateTime
  dataFim         DateTime
  observacoes     String?
  dataCadastro    DateTime @default(now())
  ativo           Boolean  @default(true)
  gerouFinanceiro Boolean  @default(false)
  vagas           Int
  valor           Float
  publicadoSite   Boolean  @default(false)
  concluida       Boolean  @default(false)
  qtdMinVendas    Int      @default(0)

  Pacotes             Pacotes               @relation(fields: [codigoPacote], references: [id])
  codigoPacote        String
  Usuarios            Usuarios              @relation(fields: [usuarioCadastro], references: [id])
  usuarioCadastro     String
  ExcursaoQuartos     ExcursaoQuartos[]
  ExcursaoOnibus      ExcursaoOnibus[]
  PassageiroEmbarque  PassageiroEmbarque[]
  Transacoes          Transacoes[]
  ExcursaoPassageiros ExcursaoPassageiros[]
  Reservas            Reservas[]
  Vendas              Vendas[]
  LocalEmbarque       LocalEmbarque[]
}

model Vendas {
  id                String   @id @default(uuid())
  valorTotal        Float
  valorUnitario     Float
  qtd               Int
  efetivada         Boolean  @default(false)
  data              DateTime @default(now())
  origem            Int      @default(1)
  numeroComprovante String?

  Pessoas              Pessoas        @relation(fields: [codigoCliente], references: [id])
  codigoCliente        String
  FormaPagamento       FormaPagamento @relation(fields: [codigoFormaPagamento], references: [id])
  codigoFormaPagamento String
  Produtos             Produtos?      @relation(fields: [codigoProduto], references: [id])
  codigoProduto        String?
  Excursao             Excursao?      @relation(fields: [codigoExcursao], references: [id])
  codigoExcursao       String?
  Usuarios             Usuarios       @relation(fields: [usuarioCadastro], references: [id])
  usuarioCadastro      String
}

model Destinos {
  id           String   @id @default(uuid())
  nome         String
  ativo        Boolean  @default(true)
  dataCadastro DateTime @default(now())
}

model Transacoes {
  id                        String   @id @default(uuid())
  tipo                      Int
  valor                     Float
  vistoAdmin                Boolean  @default(false)
  data                      DateTime @default(now())
  efetivado                 Boolean  @default(false)
  observacao                String?
  ativo                     Boolean
  numeroComprovanteBancario String?
  idWP                      Int?

  Pessoas              Pessoas?            @relation(fields: [codigoPessoa], references: [id])
  codigoPessoa         String?
  Fornecedor           Fornecedor?         @relation(fields: [codigoFornecedor], references: [id])
  codigoFornecedor     String?
  Excursao             Excursao?           @relation(fields: [codigoExcursao], references: [id])
  codigoExcursao       String?
  Produtos             Produtos?           @relation(fields: [codigoProduto], references: [id])
  codigoProduto        String?
  Pacotes              Pacotes?            @relation(fields: [codigoPacote], references: [id])
  codigoPacote         String?
  FormaPagamento       FormaPagamento      @relation(fields: [codigoFormaPagamento], references: [id])
  codigoFormaPagamento String
  CategoriaTransacao   CategoriaTransacao? @relation(fields: [codigoCategoria], references: [id])
  codigoCategoria      String?
  ContaBancaria        ContaBancaria?      @relation(fields: [codigoContaBancaria], references: [id])
  codigoContaBancaria  String?
  Usuarios             Usuarios            @relation(fields: [usuarioCadastro], references: [id])
  usuarioCadastro      String
  Reservas             Reservas?           @relation(fields: [idReserva], references: [id])
  idReserva            String?
  Comissao             Comissao[]
}

model Fornecedor {
  id              String   @id @default(uuid())
  nome            String
  fantasia        String
  cnpj            String
  site            String?
  ativo           Boolean  @default(true)
  dataCadastro    DateTime @default(now())
  observacoes     String?
  telefone        String?
  email           String
  contato         String?
  telefoneContato String?

  Endereco        Endereco     @relation(fields: [codigoEndereco], references: [id])
  codigoEndereco  String
  Transacoes      Transacoes[]
  Usuarios        Usuarios     @relation(fields: [usuarioCadastro], references: [id])
  usuarioCadastro String
  Produtos        Produtos[]
}

model ExcursaoPassageiros {
  id           String   @id @default(uuid())
  dataCadastro DateTime @default(now())

  Reservas           Reservas             @relation(fields: [reserva], references: [id])
  reserva            String
  Excursao           Excursao             @relation(fields: [idExcursao], references: [id])
  idExcursao         String
  Pessoa             Pessoas              @relation(fields: [idPassageiro], references: [id])
  idPassageiro       String
  LocalEmbarque      LocalEmbarque        @relation(fields: [localEmbarque], references: [id])
  localEmbarque      String
  Quartos            ExcursaoQuartos[]
  Onibus             ExcursaoOnibus[]
  OpcionaisEmbarque  OpcionaisEmbarque[]
  PassageiroEmbarque PassageiroEmbarque[]
}

model CategoriaTransacao {
  id           String   @id @default(uuid())
  nome         String
  tipo         Int
  dataCadastro DateTime @default(now())

  Usuarios           Usuarios              @relation(fields: [codigoUsuario], references: [id])
  codigoUsuario      String
  SubCategoria       SubCategoriaTransacao @relation(fields: [codigoSubCategoria], references: [id])
  codigoSubCategoria String
  Transacoes         Transacoes[]
}

model SubCategoriaTransacao {
  id           String   @id @default(uuid())
  nome         String
  dataCadastro DateTime @default(now())

  Usuarios           Usuarios             @relation(fields: [codigoUsuario], references: [id])
  codigoUsuario      String
  CategoriaTransacao CategoriaTransacao[]
}

model TipoQuarto {
  id           String   @id @default(uuid())
  nome         String
  dataCadastro DateTime @default(now())

  Usuarios        Usuarios          @relation(fields: [codigoUsuario], references: [id])
  codigoUsuario   String
  ExcursaoQuartos ExcursaoQuartos[]
}

model Reservas {
  id           String   @id @default(uuid())
  reserva      Int      @default(autoincrement())
  dataCadastro DateTime @default(now())
  status       Boolean  @default(false)
  desconto     Int
  plataforma   Int      @default(1)
  criancasColo Int      @default(0)
  excluida     Boolean  @default(false)

  Usuario             Usuarios?             @relation(fields: [codigoUsuario], references: [id])
  codigoUsuario       String?
  Pessoa              Pessoas[]
  Excursao            Excursao              @relation(fields: [idExcursao], references: [id])
  idExcursao          String
  LocalEmbarque       LocalEmbarque         @relation(fields: [localEmbarqueId], references: [id])
  localEmbarqueId     String
  ExcursaoPassageiros ExcursaoPassageiros[]
  Transacoes          Transacoes[]
  CreditoClientes     CreditoClientes[]
  Opcionais           Opcionais[]
}

model RankingClientes {
  id            String    @id @default(uuid())
  nome          String
  qtdMinViagens Int
  qtdMaxViagens Int
  dataCadastro  DateTime  @default(now())
  Usuario       Usuarios  @relation(fields: [usuariosId], references: [id])
  usuariosId    String
  Pessoas       Pessoas[]
}

model CreditoClientes {
  id           String    @id @default(uuid())
  valor        Float
  ativo        Boolean   @default(true)
  dataCadastro DateTime  @default(now())
  utilizadoEm  DateTime?

  Cliente    Pessoas  @relation(fields: [pessoasId], references: [id])
  pessoasId  String
  Reserva    Reservas @relation(fields: [idReserva], references: [id])
  idReserva  String
  Usuario    Usuarios @relation(fields: [usuariosId], references: [id])
  usuariosId String
}

model Opcionais {
  id           String   @id @default(uuid())
  qtd          Int
  dataCadastro DateTime @default(now())

  Reserva           Reservas            @relation(fields: [idReserva], references: [id])
  idReserva         String
  Produto           Produtos            @relation(fields: [idProduto], references: [id])
  idProduto         String
  Usuario           Usuarios            @relation(fields: [codigoUsuario], references: [id])
  codigoUsuario     String
  OpcionaisEmbarque OpcionaisEmbarque[]
}

model Logs {
  id      String   @id @default(uuid())
  data    DateTime @default(now())
  tipo    String
  newData Json
  oldData Json
  rotina  String

  Usuario    Usuarios @relation(fields: [usuariosId], references: [id])
  usuariosId String
}

model OpcionaisEmbarque {
  id       String   @id @default(uuid())
  embarcou Boolean  @default(false)
  data     DateTime

  Opcional     Opcionais           @relation(fields: [idOpcional], references: [id])
  idOpcional   String
  Passageiro   ExcursaoPassageiros @relation(fields: [idPassageiro], references: [id])
  idPassageiro String
}

model Configuracoes {
  id           String   @id @default(uuid())
  tipo         String
  configuracao Json
  dataCadastro DateTime @default(now())

  Usuario   Usuarios @relation(fields: [idUsuario], references: [id])
  idUsuario String
}

model Comissao {
  id      String    @id @default(uuid())
  periodo String
  valor   Float
  data    DateTime  @default(now())
  pagoEm  DateTime?

  Financeiro  Transacoes @relation(fields: [idTransacao], references: [id])
  idTransacao String
  Usuario     Usuarios   @relation(fields: [usuariosId], references: [id])
  usuariosId  String
}

model Imagens {
  id         String   @id @default(uuid())
  nome       String
  url        String
  dataUpload DateTime @default(now())

  Usuario                Usuarios  @relation(fields: [userId], references: [id])
  userId                 String
  PacotesImagem          Pacotes[] @relation("imagem")
  PacotesImagemBloqueado Pacotes[] @relation("imagemBloqueado")
  Pacotes                Pacotes?  @relation(fields: [pacotesId], references: [id])
  pacotesId              String?
}
